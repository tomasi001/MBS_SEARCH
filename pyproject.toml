[tool.poetry]
name = "mbs-clarity"
version = "0.1.0"
description = "MBS Clarity MVP: parse MBS data, extract relationships, and serve a simple lookup UI"
authors = ["Thomas Shields <you@example.com>"]
readme = "README.md"
packages = [
  { include = "mbs_clarity", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.112.2"
uvicorn = {version = "^0.30.1", extras = ["standard"]}
lxml = "^5.2.2"
pydantic = "^2.8.2"
python-dotenv = "^1.0.1"
pandas = "^2.2.2"
# AI/ML dependencies - Gemini implementation
google-generativeai = "^0.8.3"
chromadb = "^0.4.22"
python-multipart = "^0.0.9"
pydantic-settings = "^2.10.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.5"
black = "^24.8.0"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
httpx = "0.27.2"

[tool.poetry.scripts]
mbs = "mbs_clarity.cli:main"
mbs-load = "mbs_clarity._loader:main"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["src", "."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"